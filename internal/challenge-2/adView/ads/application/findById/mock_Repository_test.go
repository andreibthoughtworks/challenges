// Code generated by mockery v2.26.1. DO NOT EDIT.

package ads

import (
	"github.com/javier-tw/learning-go/internal/challenge-2/adView/ads/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// FindAllAds provides a mock function with given fields:
func (_m *MockRepository) FindAllAds() ([]Ad.Ad, error) {
	ret := _m.Called()

	var r0 []Ad.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Ad.Ad, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Ad.Ad); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Ad.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindAllAds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllAds'
type MockRepository_FindAllAds_Call struct {
	*mock.Call
}

// FindAllAds is a helper method to define mock.On call
func (_e *MockRepository_Expecter) FindAllAds() *MockRepository_FindAllAds_Call {
	return &MockRepository_FindAllAds_Call{Call: _e.mock.On("FindAllAds")}
}

func (_c *MockRepository_FindAllAds_Call) Run(run func()) *MockRepository_FindAllAds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_FindAllAds_Call) Return(_a0 []Ad.Ad, _a1 error) *MockRepository_FindAllAds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindAllAds_Call) RunAndReturn(run func() ([]Ad.Ad, error)) *MockRepository_FindAllAds_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockRepository) FindById(id string) (Ad.Ad, error) {
	ret := _m.Called(id)

	var r0 Ad.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Ad.Ad, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) Ad.Ad); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Ad.Ad)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id string
func (_e *MockRepository_Expecter) FindById(id interface{}) *MockRepository_FindById_Call {
	return &MockRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockRepository_FindById_Call) Run(run func(id string)) *MockRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_FindById_Call) Return(_a0 Ad.Ad, _a1 error) *MockRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindById_Call) RunAndReturn(run func(string) (Ad.Ad, error)) *MockRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAd provides a mock function with given fields: ad
func (_m *MockRepository) SaveAd(ad Ad.Ad) error {
	ret := _m.Called(ad)

	var r0 error
	if rf, ok := ret.Get(0).(func(Ad.Ad) error); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_SaveAd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAd'
type MockRepository_SaveAd_Call struct {
	*mock.Call
}

// SaveAd is a helper method to define mock.On call
//   - ad Ad
func (_e *MockRepository_Expecter) SaveAd(ad interface{}) *MockRepository_SaveAd_Call {
	return &MockRepository_SaveAd_Call{Call: _e.mock.On("SaveAd", ad)}
}

func (_c *MockRepository_SaveAd_Call) Run(run func(ad Ad.Ad)) *MockRepository_SaveAd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Ad.Ad))
	})
	return _c
}

func (_c *MockRepository_SaveAd_Call) Return(_a0 error) *MockRepository_SaveAd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_SaveAd_Call) RunAndReturn(run func(Ad.Ad) error) *MockRepository_SaveAd_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
