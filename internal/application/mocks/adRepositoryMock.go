// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	domain "polaris/internal/application/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

type AdRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AdRepository) EXPECT() *AdRepository_Expecter {
	return &AdRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields:
func (_m *AdRepository) FindAll() []domain.Ad {
	ret := _m.Called()

	var r0 []domain.Ad
	if rf, ok := ret.Get(0).(func() []domain.Ad); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Ad)
		}
	}

	return r0
}

// AdRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type AdRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *AdRepository_Expecter) FindAll() *AdRepository_FindAll_Call {
	return &AdRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *AdRepository_FindAll_Call) Run(run func()) *AdRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AdRepository_FindAll_Call) Return(_a0 []domain.Ad) *AdRepository_FindAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AdRepository_FindAll_Call) RunAndReturn(run func() []domain.Ad) *AdRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *AdRepository) FindById(id uuid.UUID) (domain.Ad, error) {
	ret := _m.Called(id)

	var r0 domain.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (domain.Ad, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Ad); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Ad)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type AdRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *AdRepository_Expecter) FindById(id interface{}) *AdRepository_FindById_Call {
	return &AdRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *AdRepository_FindById_Call) Run(run func(id uuid.UUID)) *AdRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AdRepository_FindById_Call) Return(_a0 domain.Ad, _a1 error) *AdRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdRepository_FindById_Call) RunAndReturn(run func(uuid.UUID) (domain.Ad, error)) *AdRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ad
func (_m *AdRepository) Save(ad domain.Ad) domain.Ad {
	ret := _m.Called(ad)

	var r0 domain.Ad
	if rf, ok := ret.Get(0).(func(domain.Ad) domain.Ad); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Get(0).(domain.Ad)
	}

	return r0
}

// AdRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type AdRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ad domain.Ad
func (_e *AdRepository_Expecter) Save(ad interface{}) *AdRepository_Save_Call {
	return &AdRepository_Save_Call{Call: _e.mock.On("Save", ad)}
}

func (_c *AdRepository_Save_Call) Run(run func(ad domain.Ad)) *AdRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Ad))
	})
	return _c
}

func (_c *AdRepository_Save_Call) Return(_a0 domain.Ad) *AdRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AdRepository_Save_Call) RunAndReturn(run func(domain.Ad) domain.Ad) *AdRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAdRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdRepository(t mockConstructorTestingTNewAdRepository) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
