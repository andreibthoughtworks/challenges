// Code generated by MockGen. DO NOT EDIT.
// Source: domain/ad/AdRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ad "learning-go-challenges/domain/ad"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdRepository is a mock of AdRepository interface.
type MockAdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdRepositoryMockRecorder
}

// MockAdRepositoryMockRecorder is the mock recorder for MockAdRepository.
type MockAdRepositoryMockRecorder struct {
	mock *MockAdRepository
}

// NewMockAdRepository creates a new mock instance.
func NewMockAdRepository(ctrl *gomock.Controller) *MockAdRepository {
	mock := &MockAdRepository{ctrl: ctrl}
	mock.recorder = &MockAdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdRepository) EXPECT() *MockAdRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockAdRepository) FindAll() []ad.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]ad.Ad)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockAdRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAdRepository)(nil).FindAll))
}

// FindBy mocks base method.
func (m *MockAdRepository) FindBy(id ad.Id) ad.Ad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", id)
	ret0, _ := ret[0].(ad.Ad)
	return ret0
}

// FindBy indicates an expected call of FindBy.
func (mr *MockAdRepositoryMockRecorder) FindBy(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockAdRepository)(nil).FindBy), id)
}

// Persist mocks base method.
func (m *MockAdRepository) Persist(ad ad.Ad) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Persist", ad)
}

// Persist indicates an expected call of Persist.
func (mr *MockAdRepositoryMockRecorder) Persist(ad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockAdRepository)(nil).Persist), ad)
}
